{
  "additionalProperties": false,
  "createOnlyProperties": [
    "/properties/StorageConfiguration",
    "/properties/KnowledgeBaseConfiguration/Type",
    "/properties/KnowledgeBaseConfiguration/VectorKnowledgeBaseConfiguration",
    "/properties/KnowledgeBaseConfiguration/KendraKnowledgeBaseConfiguration",
    "/properties/KnowledgeBaseConfiguration/SqlKnowledgeBaseConfiguration/Type",
    "/properties/KnowledgeBaseConfiguration/SqlKnowledgeBaseConfiguration/RedshiftConfiguration/StorageConfigurations",
    "/properties/KnowledgeBaseConfiguration/SqlKnowledgeBaseConfiguration/RedshiftConfiguration/QueryEngineConfiguration"
  ],
  "definitions": {
    "AwsDataCatalogTableName": {
      "description": "AWS Data Catalog table name",
      "maxLength": 200,
      "minLength": 1,
      "pattern": "^.*\\.*$",
      "type": "string"
    },
    "AwsDataCatalogTableNames": {
      "description": "List of table names in AWS Data Catalog. Must follow two part notation",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/AwsDataCatalogTableName"
      },
      "maxItems": 1000,
      "minItems": 1,
      "type": "array"
    },
    "BedrockEmbeddingModelConfiguration": {
      "additionalProperties": false,
      "description": "The vector configuration details for the Bedrock embeddings model.",
      "properties": {
        "Dimensions": {
          "description": "The dimensions details for the vector configuration used on the Bedrock embeddings model.",
          "maximum": 4096,
          "minimum": 0,
          "type": "integer"
        },
        "EmbeddingDataType": {
          "description": "The data type for the vectors when using a model to convert text into vector embeddings.",
          "enum": [
            "FLOAT32",
            "BINARY"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CuratedQueries": {
      "description": "List of example queries and results",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/CuratedQuery"
      },
      "maxItems": 10,
      "type": "array"
    },
    "CuratedQuery": {
      "additionalProperties": false,
      "description": "Curated query or question and answer pair",
      "properties": {
        "NaturalLanguage": {
          "$ref": "#/definitions/NaturalLanguageString"
        },
        "Sql": {
          "$ref": "#/definitions/SqlString"
        }
      },
      "required": [
        "NaturalLanguage",
        "Sql"
      ],
      "type": "object"
    },
    "DescriptionString": {
      "description": "Description for the attached entity",
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "EmbeddingModelConfiguration": {
      "additionalProperties": false,
      "description": "The embeddings model configuration details for the vector model used in Knowledge Base.",
      "properties": {
        "BedrockEmbeddingModelConfiguration": {
          "$ref": "#/definitions/BedrockEmbeddingModelConfiguration"
        }
      },
      "type": "object"
    },
    "InclusionType": {
      "description": "Include or Exclude status for an entity",
      "enum": [
        "INCLUDE",
        "EXCLUDE"
      ],
      "type": "string"
    },
    "KendraIndexArn": {
      "description": "Arn of a Kendra index",
      "pattern": "^arn:aws(|-cn|-us-gov):kendra:[a-z0-9-]{1,20}:([0-9]{12}|):index/([a-zA-Z0-9][a-zA-Z0-9-]{35}|[a-zA-Z0-9][a-zA-Z0-9-]{35}-[a-zA-Z0-9][a-zA-Z0-9-]{35})$",
      "type": "string"
    },
    "KendraKnowledgeBaseConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for a Kendra knowledge base",
      "properties": {
        "KendraIndexArn": {
          "$ref": "#/definitions/KendraIndexArn"
        }
      },
      "required": [
        "KendraIndexArn"
      ],
      "type": "object"
    },
    "KnowledgeBaseConfiguration": {
      "additionalProperties": false,
      "description": "Contains details about the embeddings model used for the knowledge base.",
      "properties": {
        "KendraKnowledgeBaseConfiguration": {
          "$ref": "#/definitions/KendraKnowledgeBaseConfiguration"
        },
        "SqlKnowledgeBaseConfiguration": {
          "$ref": "#/definitions/SqlKnowledgeBaseConfiguration"
        },
        "Type": {
          "$ref": "#/definitions/KnowledgeBaseType"
        },
        "VectorKnowledgeBaseConfiguration": {
          "$ref": "#/definitions/VectorKnowledgeBaseConfiguration"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "KnowledgeBaseStatus": {
      "description": "The status of a knowledge base.",
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING",
        "UPDATING",
        "FAILED",
        "DELETE_UNSUCCESSFUL"
      ],
      "type": "string"
    },
    "KnowledgeBaseStorageType": {
      "description": "The storage type of a knowledge base.",
      "enum": [
        "OPENSEARCH_SERVERLESS",
        "PINECONE",
        "RDS",
        "MONGO_DB_ATLAS",
        "NEPTUNE_ANALYTICS",
        "OPENSEARCH_MANAGED_CLUSTER"
      ],
      "type": "string"
    },
    "KnowledgeBaseType": {
      "description": "The type of a knowledge base.",
      "enum": [
        "VECTOR",
        "KENDRA",
        "SQL"
      ],
      "type": "string"
    },
    "MongoDbAtlasConfiguration": {
      "additionalProperties": false,
      "description": "Contains the storage configuration of the knowledge base in MongoDb Atlas Cloud.",
      "properties": {
        "CollectionName": {
          "description": "Name of the collection within MongoDB Atlas.",
          "maxLength": 63,
          "pattern": "^.*$",
          "type": "string"
        },
        "CredentialsSecretArn": {
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon Mongo database.",
          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
          "type": "string"
        },
        "DatabaseName": {
          "description": "Name of the database within MongoDB Atlas.",
          "maxLength": 63,
          "pattern": "^.*$",
          "type": "string"
        },
        "Endpoint": {
          "description": "MongoDB Atlas endpoint.",
          "maxLength": 2048,
          "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+\\.mongodb\\.net$",
          "type": "string"
        },
        "EndpointServiceName": {
          "description": "MongoDB Atlas endpoint service name.",
          "maxLength": 255,
          "pattern": "^(?:arn:aws(?:-us-gov|-cn|-iso|-iso-[a-z])*:.+:.*:\\d+:.+/.+$|[a-zA-Z0-9*]+[a-zA-Z0-9._-]*)$",
          "type": "string"
        },
        "FieldMapping": {
          "$ref": "#/definitions/MongoDbAtlasFieldMapping"
        },
        "TextIndexName": {
          "description": "Name of a MongoDB Atlas text index.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "VectorIndexName": {
          "description": "Name of a MongoDB Atlas index.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "Endpoint",
        "CredentialsSecretArn",
        "DatabaseName",
        "CollectionName",
        "VectorIndexName",
        "FieldMapping"
      ],
      "type": "object"
    },
    "MongoDbAtlasFieldMapping": {
      "additionalProperties": false,
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "VectorField": {
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "VectorField",
        "MetadataField",
        "TextField"
      ],
      "type": "object"
    },
    "NaturalLanguageString": {
      "description": "Question for the curated query",
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "NeptuneAnalyticsConfiguration": {
      "additionalProperties": false,
      "description": "Contains the configurations to use Neptune Analytics as Vector Store.",
      "properties": {
        "FieldMapping": {
          "$ref": "#/definitions/NeptuneAnalyticsFieldMapping"
        },
        "GraphArn": {
          "description": "ARN for Neptune Analytics graph database.",
          "maxLength": 255,
          "minLength": 1,
          "pattern": "^arn:aws(|-cn|-us-gov):neptune-graph:[a-zA-Z0-9-]*:[0-9]{12}:graph\\/g-[a-zA-Z0-9]{10}$",
          "type": "string"
        }
      },
      "required": [
        "GraphArn",
        "FieldMapping"
      ],
      "type": "object"
    },
    "NeptuneAnalyticsFieldMapping": {
      "additionalProperties": false,
      "description": "A mapping of Bedrock Knowledge Base fields to Neptune Analytics fields.",
      "properties": {
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "TextField",
        "MetadataField"
      ],
      "type": "object"
    },
    "OpenSearchManagedClusterConfiguration": {
      "additionalProperties": false,
      "description": "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
      "properties": {
        "DomainArn": {
          "description": "The Amazon Resource Name (ARN) of the OpenSearch domain.",
          "maxLength": 2048,
          "pattern": "^arn:aws(|-cn|-us-gov|-iso):es:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:domain/[a-z][a-z0-9-]{3,28}$",
          "type": "string"
        },
        "DomainEndpoint": {
          "description": "The endpoint URL the OpenSearch domain.",
          "maxLength": 2048,
          "pattern": "^https://.*$",
          "type": "string"
        },
        "FieldMapping": {
          "$ref": "#/definitions/OpenSearchManagedClusterFieldMapping"
        },
        "VectorIndexName": {
          "description": "The name of the vector store.",
          "maxLength": 2048,
          "minLength": 1,
          "pattern": "^(?![\\-_+.])[a-z0-9][a-z0-9\\-_\\.]*$",
          "type": "string"
        }
      },
      "required": [
        "DomainArn",
        "DomainEndpoint",
        "VectorIndexName",
        "FieldMapping"
      ],
      "type": "object"
    },
    "OpenSearchManagedClusterFieldMapping": {
      "additionalProperties": false,
      "description": "A mapping of Bedrock Knowledge Base fields to OpenSearch Managed Cluster field names",
      "properties": {
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "VectorField": {
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "MetadataField",
        "TextField",
        "VectorField"
      ],
      "type": "object"
    },
    "OpenSearchServerlessConfiguration": {
      "additionalProperties": false,
      "description": "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
      "properties": {
        "CollectionArn": {
          "description": "The ARN of the OpenSearch Service vector store.",
          "maxLength": 2048,
          "pattern": "^arn:aws(|-cn|-us-gov|-iso):aoss:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:collection/[a-z0-9-]{3,32}$",
          "type": "string"
        },
        "FieldMapping": {
          "$ref": "#/definitions/OpenSearchServerlessFieldMapping"
        },
        "VectorIndexName": {
          "description": "The name of the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "CollectionArn",
        "FieldMapping",
        "VectorIndexName"
      ],
      "type": "object"
    },
    "OpenSearchServerlessFieldMapping": {
      "additionalProperties": false,
      "description": "A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names",
      "properties": {
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "VectorField": {
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "MetadataField",
        "TextField",
        "VectorField"
      ],
      "type": "object"
    },
    "PineconeConfiguration": {
      "additionalProperties": false,
      "description": "Contains the storage configuration of the knowledge base in Pinecone.",
      "properties": {
        "ConnectionString": {
          "description": "The endpoint URL for your index management page.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "CredentialsSecretArn": {
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.",
          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
          "type": "string"
        },
        "FieldMapping": {
          "$ref": "#/definitions/PineconeFieldMapping"
        },
        "Namespace": {
          "description": "The namespace to be used to write new data to your database.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "ConnectionString",
        "CredentialsSecretArn",
        "FieldMapping"
      ],
      "type": "object"
    },
    "PineconeFieldMapping": {
      "additionalProperties": false,
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "MetadataField",
        "TextField"
      ],
      "type": "object"
    },
    "QueryEngineType": {
      "description": "SQL query engine type",
      "enum": [
        "REDSHIFT"
      ],
      "type": "string"
    },
    "QueryExecutionTimeoutSeconds": {
      "description": "Max query execution timeout",
      "maximum": 200,
      "minimum": 1,
      "type": "integer"
    },
    "QueryGenerationColumn": {
      "additionalProperties": false,
      "description": "Redshift query generation column",
      "properties": {
        "Description": {
          "$ref": "#/definitions/DescriptionString"
        },
        "Inclusion": {
          "$ref": "#/definitions/InclusionType"
        },
        "Name": {
          "$ref": "#/definitions/QueryGenerationColumnName"
        }
      },
      "type": "object"
    },
    "QueryGenerationColumnName": {
      "description": "Query generation column name",
      "maxLength": 127,
      "minLength": 1,
      "type": "string"
    },
    "QueryGenerationColumns": {
      "description": "List of Redshift query generation columns",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/QueryGenerationColumn"
      },
      "type": "array"
    },
    "QueryGenerationConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for generating Redshift engine queries",
      "properties": {
        "ExecutionTimeoutSeconds": {
          "$ref": "#/definitions/QueryExecutionTimeoutSeconds"
        },
        "GenerationContext": {
          "$ref": "#/definitions/QueryGenerationContext"
        }
      },
      "type": "object"
    },
    "QueryGenerationContext": {
      "additionalProperties": false,
      "description": "Context used to improve query generation",
      "properties": {
        "CuratedQueries": {
          "$ref": "#/definitions/CuratedQueries"
        },
        "Tables": {
          "$ref": "#/definitions/QueryGenerationTables"
        }
      },
      "type": "object"
    },
    "QueryGenerationTable": {
      "additionalProperties": false,
      "description": "Tables used for Redshift query generation context",
      "properties": {
        "Columns": {
          "$ref": "#/definitions/QueryGenerationColumns"
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString"
        },
        "Inclusion": {
          "$ref": "#/definitions/InclusionType"
        },
        "Name": {
          "$ref": "#/definitions/QueryGenerationTableName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "QueryGenerationTableName": {
      "description": "Query generation table name. Must follow three-part notation",
      "pattern": "^.*\\..*\\..*$",
      "type": "string"
    },
    "QueryGenerationTables": {
      "description": "List of tables used for Redshift query generation context",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/QueryGenerationTable"
      },
      "maxItems": 50,
      "type": "array"
    },
    "RdsConfiguration": {
      "additionalProperties": false,
      "description": "Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.",
      "properties": {
        "CredentialsSecretArn": {
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.",
          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
          "type": "string"
        },
        "DatabaseName": {
          "description": "The name of your Amazon RDS database.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "type": "string"
        },
        "FieldMapping": {
          "$ref": "#/definitions/RdsFieldMapping"
        },
        "ResourceArn": {
          "description": "The ARN of the vector store.",
          "pattern": "^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$",
          "type": "string"
        },
        "TableName": {
          "description": "The name of the table in the database.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\.\\-]+$",
          "type": "string"
        }
      },
      "required": [
        "CredentialsSecretArn",
        "DatabaseName",
        "FieldMapping",
        "ResourceArn",
        "TableName"
      ],
      "type": "object"
    },
    "RdsFieldMapping": {
      "additionalProperties": false,
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "CustomMetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores custom metadata about the vector store.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "type": "string"
        },
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "type": "string"
        },
        "PrimaryKeyField": {
          "description": "The name of the field in which Amazon Bedrock stores the ID for each entry.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "type": "string"
        },
        "VectorField": {
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "maxLength": 63,
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "type": "string"
        }
      },
      "required": [
        "MetadataField",
        "PrimaryKeyField",
        "TextField",
        "VectorField"
      ],
      "type": "object"
    },
    "RedisEnterpriseCloudConfiguration": {
      "additionalProperties": false,
      "description": "Contains the storage configuration of the knowledge base in Redis Enterprise Cloud.",
      "properties": {
        "CredentialsSecretArn": {
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.",
          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
          "type": "string"
        },
        "Endpoint": {
          "description": "The endpoint URL of the Redis Enterprise Cloud database.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "FieldMapping": {
          "$ref": "#/definitions/RedisEnterpriseCloudFieldMapping"
        },
        "VectorIndexName": {
          "description": "The name of the vector index.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "CredentialsSecretArn",
        "Endpoint",
        "FieldMapping",
        "VectorIndexName"
      ],
      "type": "object"
    },
    "RedisEnterpriseCloudFieldMapping": {
      "additionalProperties": false,
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "MetadataField": {
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "TextField": {
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        },
        "VectorField": {
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "maxLength": 2048,
          "pattern": "^.*$",
          "type": "string"
        }
      },
      "required": [
        "MetadataField",
        "TextField",
        "VectorField"
      ],
      "type": "object"
    },
    "RedshiftClusterIdentifier": {
      "description": "Redshift cluster identifier",
      "maxLength": 63,
      "minLength": 1,
      "type": "string"
    },
    "RedshiftConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for a Redshift knowledge base",
      "properties": {
        "QueryEngineConfiguration": {
          "$ref": "#/definitions/RedshiftQueryEngineConfiguration"
        },
        "QueryGenerationConfiguration": {
          "$ref": "#/definitions/QueryGenerationConfiguration"
        },
        "StorageConfigurations": {
          "$ref": "#/definitions/RedshiftQueryEngineStorageConfigurations"
        }
      },
      "required": [
        "StorageConfigurations",
        "QueryEngineConfiguration"
      ],
      "type": "object"
    },
    "RedshiftDatabase": {
      "description": "Redshift database name",
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "RedshiftProvisionedAuthConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for Redshift query engine provisioned auth setup",
      "properties": {
        "DatabaseUser": {
          "description": "Redshift database user",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/RedshiftProvisionedAuthType"
        },
        "UsernamePasswordSecretArn": {
          "$ref": "#/definitions/SecretArn"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "RedshiftProvisionedAuthType": {
      "description": "Provisioned Redshift auth type",
      "enum": [
        "IAM",
        "USERNAME_PASSWORD",
        "USERNAME"
      ],
      "type": "string"
    },
    "RedshiftProvisionedConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for provisioned Redshift query engine",
      "properties": {
        "AuthConfiguration": {
          "$ref": "#/definitions/RedshiftProvisionedAuthConfiguration"
        },
        "ClusterIdentifier": {
          "$ref": "#/definitions/RedshiftClusterIdentifier"
        }
      },
      "required": [
        "ClusterIdentifier",
        "AuthConfiguration"
      ],
      "type": "object"
    },
    "RedshiftQueryEngineAwsDataCatalogStorageConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for Redshift query engine AWS Data Catalog backed storage",
      "properties": {
        "TableNames": {
          "$ref": "#/definitions/AwsDataCatalogTableNames"
        }
      },
      "required": [
        "TableNames"
      ],
      "type": "object"
    },
    "RedshiftQueryEngineConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for Redshift query engine",
      "properties": {
        "ProvisionedConfiguration": {
          "$ref": "#/definitions/RedshiftProvisionedConfiguration"
        },
        "ServerlessConfiguration": {
          "$ref": "#/definitions/RedshiftServerlessConfiguration"
        },
        "Type": {
          "$ref": "#/definitions/RedshiftQueryEngineType"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "RedshiftQueryEngineRedshiftStorageConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for Redshift query engine Redshift backed storage",
      "properties": {
        "DatabaseName": {
          "$ref": "#/definitions/RedshiftDatabase"
        }
      },
      "required": [
        "DatabaseName"
      ],
      "type": "object"
    },
    "RedshiftQueryEngineStorageConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for available Redshift query engine storage types",
      "properties": {
        "AwsDataCatalogConfiguration": {
          "$ref": "#/definitions/RedshiftQueryEngineAwsDataCatalogStorageConfiguration"
        },
        "RedshiftConfiguration": {
          "$ref": "#/definitions/RedshiftQueryEngineRedshiftStorageConfiguration"
        },
        "Type": {
          "$ref": "#/definitions/RedshiftQueryEngineStorageType"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "RedshiftQueryEngineStorageConfigurations": {
      "description": "List of configurations for available Redshift query engine storage types",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/RedshiftQueryEngineStorageConfiguration"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "RedshiftQueryEngineStorageType": {
      "description": "Redshift query engine storage type",
      "enum": [
        "REDSHIFT",
        "AWS_DATA_CATALOG"
      ],
      "type": "string"
    },
    "RedshiftQueryEngineType": {
      "description": "Redshift query engine type",
      "enum": [
        "SERVERLESS",
        "PROVISIONED"
      ],
      "type": "string"
    },
    "RedshiftServerlessAuthConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for Redshift query engine serverless auth setup",
      "properties": {
        "Type": {
          "$ref": "#/definitions/RedshiftServerlessAuthType"
        },
        "UsernamePasswordSecretArn": {
          "$ref": "#/definitions/SecretArn"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "RedshiftServerlessAuthType": {
      "description": "Serverless Redshift auth type",
      "enum": [
        "IAM",
        "USERNAME_PASSWORD"
      ],
      "type": "string"
    },
    "RedshiftServerlessConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for serverless Redshift query engine",
      "properties": {
        "AuthConfiguration": {
          "$ref": "#/definitions/RedshiftServerlessAuthConfiguration"
        },
        "WorkgroupArn": {
          "$ref": "#/definitions/WorkgroupArn"
        }
      },
      "required": [
        "WorkgroupArn",
        "AuthConfiguration"
      ],
      "type": "object"
    },
    "S3Location": {
      "additionalProperties": false,
      "description": "An Amazon S3 location.",
      "properties": {
        "URI": {
          "description": "The location's URI",
          "maxLength": 2048,
          "minLength": 1,
          "pattern": "^s3://.{1,128}$",
          "type": "string"
        }
      },
      "required": [
        "URI"
      ],
      "type": "object"
    },
    "SecretArn": {
      "description": "Arn of a SecretsManager Secret",
      "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
      "type": "string"
    },
    "SqlKnowledgeBaseConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for a SQL knowledge base",
      "properties": {
        "RedshiftConfiguration": {
          "$ref": "#/definitions/RedshiftConfiguration"
        },
        "Type": {
          "$ref": "#/definitions/QueryEngineType"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "SqlString": {
      "description": "Answer for the curated query",
      "maxLength": 1000,
      "minLength": 1,
      "type": "string"
    },
    "StorageConfiguration": {
      "additionalProperties": false,
      "description": "The vector store service in which the knowledge base is stored.",
      "oneOf": [
        {
          "required": [
            "OpensearchServerlessConfiguration"
          ]
        },
        {
          "required": [
            "PineconeConfiguration"
          ]
        },
        {
          "required": [
            "RdsConfiguration"
          ]
        },
        {
          "required": [
            "NeptuneAnalyticsConfiguration"
          ]
        },
        {
          "required": [
            "MongoDbAtlasConfiguration"
          ]
        },
        {
          "required": [
            "OpensearchManagedClusterConfiguration"
          ]
        }
      ],
      "properties": {
        "MongoDbAtlasConfiguration": {
          "$ref": "#/definitions/MongoDbAtlasConfiguration"
        },
        "NeptuneAnalyticsConfiguration": {
          "$ref": "#/definitions/NeptuneAnalyticsConfiguration"
        },
        "OpensearchManagedClusterConfiguration": {
          "$ref": "#/definitions/OpenSearchManagedClusterConfiguration"
        },
        "OpensearchServerlessConfiguration": {
          "$ref": "#/definitions/OpenSearchServerlessConfiguration"
        },
        "PineconeConfiguration": {
          "$ref": "#/definitions/PineconeConfiguration"
        },
        "RdsConfiguration": {
          "$ref": "#/definitions/RdsConfiguration"
        },
        "Type": {
          "$ref": "#/definitions/KnowledgeBaseStorageType"
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "SupplementalDataStorageConfiguration": {
      "additionalProperties": false,
      "description": "Configurations for supplemental data storage.",
      "properties": {
        "SupplementalDataStorageLocations": {
          "$ref": "#/definitions/SupplementalDataStorageLocations"
        }
      },
      "required": [
        "SupplementalDataStorageLocations"
      ],
      "type": "object"
    },
    "SupplementalDataStorageLocation": {
      "additionalProperties": false,
      "description": "Supplemental data storage location.",
      "properties": {
        "S3Location": {
          "$ref": "#/definitions/S3Location"
        },
        "SupplementalDataStorageLocationType": {
          "$ref": "#/definitions/SupplementalDataStorageLocationType"
        }
      },
      "required": [
        "SupplementalDataStorageLocationType"
      ],
      "type": "object"
    },
    "SupplementalDataStorageLocationType": {
      "description": "Supplemental data storage location type.",
      "enum": [
        "S3"
      ],
      "type": "string"
    },
    "SupplementalDataStorageLocations": {
      "description": "List of supplemental data storage locations.",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/SupplementalDataStorageLocation"
      },
      "maxItems": 1,
      "minItems": 1,
      "type": "array"
    },
    "TagsMap": {
      "additionalProperties": false,
      "description": "A map of tag keys and values",
      "patternProperties": {
        "^[a-zA-Z0-9\\s._:/=+@-]*$": {
          "description": "Value of a tag",
          "maxLength": 256,
          "minLength": 0,
          "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VectorKnowledgeBaseConfiguration": {
      "additionalProperties": false,
      "description": "Contains details about the model used to create vector embeddings for the knowledge base.",
      "properties": {
        "EmbeddingModelArn": {
          "description": "The ARN of the model used to create vector embeddings for the knowledge base.",
          "maxLength": 2048,
          "minLength": 20,
          "pattern": "^(arn:aws(-[^:]+)?:[a-z0-9-]+:[a-z0-9-]{1,20}:[0-9]{0,12}:[a-zA-Z0-9-:/._+]+)$",
          "type": "string"
        },
        "EmbeddingModelConfiguration": {
          "$ref": "#/definitions/EmbeddingModelConfiguration"
        },
        "SupplementalDataStorageConfiguration": {
          "$ref": "#/definitions/SupplementalDataStorageConfiguration"
        }
      },
      "required": [
        "EmbeddingModelArn"
      ],
      "type": "object"
    },
    "WorkgroupArn": {
      "description": "Workgroup arn",
      "pattern": "^(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$",
      "type": "string"
    }
  },
  "description": "Definition of AWS::Bedrock::KnowledgeBase Resource Type",
  "handlers": {
    "create": {
      "permissions": [
        "bedrock:CreateKnowledgeBase",
        "bedrock:GetKnowledgeBase",
        "bedrock:TagResource",
        "bedrock:ListTagsForResource",
        "bedrock:AssociateThirdPartyKnowledgeBase",
        "iam:PassRole"
      ]
    },
    "delete": {
      "permissions": [
        "bedrock:GetKnowledgeBase",
        "bedrock:DeleteKnowledgeBase",
        "bedrock:ListDataSources"
      ]
    },
    "list": {
      "permissions": [
        "bedrock:ListKnowledgeBases"
      ]
    },
    "read": {
      "permissions": [
        "bedrock:GetKnowledgeBase",
        "bedrock:ListTagsForResource"
      ]
    },
    "update": {
      "permissions": [
        "bedrock:GetKnowledgeBase",
        "bedrock:UpdateKnowledgeBase",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:ListTagsForResource",
        "bedrock:AssociateThirdPartyKnowledgeBase",
        "iam:PassRole"
      ]
    }
  },
  "primaryIdentifier": [
    "/properties/KnowledgeBaseId"
  ],
  "properties": {
    "CreatedAt": {
      "description": "The time at which the knowledge base was created.",
      "type": "string"
    },
    "Description": {
      "description": "Description of the Resource.",
      "maxLength": 200,
      "minLength": 1,
      "type": "string"
    },
    "FailureReasons": {
      "description": "A list of reasons that the API operation on the knowledge base failed.",
      "insertionOrder": false,
      "items": {
        "description": "Failure Reason for Error.",
        "maxLength": 2048,
        "type": "string"
      },
      "maxItems": 2048,
      "type": "array"
    },
    "KnowledgeBaseArn": {
      "description": "The ARN of the knowledge base.",
      "maxLength": 128,
      "minLength": 0,
      "pattern": "^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:[0-9]{12}:knowledge-base/[0-9a-zA-Z]+$",
      "type": "string"
    },
    "KnowledgeBaseConfiguration": {
      "$ref": "#/definitions/KnowledgeBaseConfiguration"
    },
    "KnowledgeBaseId": {
      "description": "The unique identifier of the knowledge base.",
      "pattern": "^[0-9a-zA-Z]{10}$",
      "type": "string"
    },
    "Name": {
      "description": "The name of the knowledge base.",
      "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
      "type": "string"
    },
    "RoleArn": {
      "description": "The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_",
      "maxLength": 2048,
      "pattern": "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$",
      "type": "string"
    },
    "Status": {
      "$ref": "#/definitions/KnowledgeBaseStatus"
    },
    "StorageConfiguration": {
      "$ref": "#/definitions/StorageConfiguration"
    },
    "Tags": {
      "$ref": "#/definitions/TagsMap"
    },
    "UpdatedAt": {
      "description": "The time at which the knowledge base was last updated.",
      "type": "string"
    }
  },
  "readOnlyProperties": [
    "/properties/KnowledgeBaseId",
    "/properties/KnowledgeBaseArn",
    "/properties/CreatedAt",
    "/properties/UpdatedAt",
    "/properties/FailureReasons",
    "/properties/Status"
  ],
  "required": [
    "KnowledgeBaseConfiguration",
    "Name",
    "RoleArn"
  ],
  "tagging": {
    "cloudFormationSystemTags": true,
    "permissions": [
      "bedrock:TagResource",
      "bedrock:UntagResource",
      "bedrock:ListTagsForResource"
    ],
    "tagOnCreate": true,
    "tagProperty": "/properties/Tags",
    "tagUpdatable": true,
    "taggable": true
  },
  "typeName": "AWS::Bedrock::KnowledgeBase"
}
