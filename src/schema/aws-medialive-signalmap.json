{
  "additionalProperties": false,
  "createOnlyProperties": [
    "/properties/Tags"
  ],
  "definitions": {
    "FailedMediaResourceMap": {
      "additionalProperties": false,
      "description": "A map representing an incomplete AWS media workflow as a graph.",
      "patternProperties": {
        ".+": {
          "$ref": "#/definitions/MediaResource"
        }
      },
      "type": "object"
    },
    "MediaResource": {
      "additionalProperties": false,
      "description": "An AWS resource used in media workflows.",
      "properties": {
        "Destinations": {
          "items": {
            "$ref": "#/definitions/MediaResourceNeighbor"
          },
          "type": "array"
        },
        "Name": {
          "description": "The logical name of an AWS media resource.",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "Sources": {
          "items": {
            "$ref": "#/definitions/MediaResourceNeighbor"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MediaResourceMap": {
      "additionalProperties": false,
      "description": "A map representing an AWS media workflow as a graph.",
      "patternProperties": {
        ".+": {
          "$ref": "#/definitions/MediaResource"
        }
      },
      "type": "object"
    },
    "MediaResourceNeighbor": {
      "additionalProperties": false,
      "description": "A direct source or destination neighbor to an AWS media resource.",
      "properties": {
        "Arn": {
          "description": "The ARN of a resource used in AWS media workflows.",
          "maxLength": 2048,
          "minLength": 1,
          "pattern": "^arn.+$",
          "type": "string"
        },
        "Name": {
          "description": "The logical name of an AWS media resource.",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "Arn"
      ],
      "type": "object"
    },
    "MonitorDeployment": {
      "additionalProperties": false,
      "description": "Represents the latest monitor deployment of a signal map.",
      "properties": {
        "DetailsUri": {
          "description": "URI associated with a signal map's monitor deployment.",
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Error message associated with a failed monitor deployment of a signal map.",
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/SignalMapMonitorDeploymentStatus"
        }
      },
      "required": [
        "Status"
      ],
      "type": "object"
    },
    "SignalMapMonitorDeploymentStatus": {
      "description": "A signal map's monitor deployment status.",
      "enum": [
        "NOT_DEPLOYED",
        "DRY_RUN_DEPLOYMENT_COMPLETE",
        "DRY_RUN_DEPLOYMENT_FAILED",
        "DRY_RUN_DEPLOYMENT_IN_PROGRESS",
        "DEPLOYMENT_COMPLETE",
        "DEPLOYMENT_FAILED",
        "DEPLOYMENT_IN_PROGRESS",
        "DELETE_COMPLETE",
        "DELETE_FAILED",
        "DELETE_IN_PROGRESS"
      ],
      "type": "string"
    },
    "SignalMapStatus": {
      "description": "A signal map's current status which is dependent on its lifecycle actions or associated jobs.",
      "enum": [
        "CREATE_IN_PROGRESS",
        "CREATE_COMPLETE",
        "CREATE_FAILED",
        "UPDATE_IN_PROGRESS",
        "UPDATE_COMPLETE",
        "UPDATE_REVERTED",
        "UPDATE_FAILED",
        "READY",
        "NOT_READY"
      ],
      "type": "string"
    },
    "SuccessfulMonitorDeployment": {
      "additionalProperties": false,
      "description": "Represents the latest successful monitor deployment of a signal map.",
      "properties": {
        "DetailsUri": {
          "description": "URI associated with a signal map's monitor deployment.",
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/SignalMapMonitorDeploymentStatus"
        }
      },
      "required": [
        "DetailsUri",
        "Status"
      ],
      "type": "object"
    },
    "TagMap": {
      "additionalProperties": false,
      "description": "Represents the tags associated with a resource.",
      "patternProperties": {
        ".+": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Unit": {
      "additionalProperties": false,
      "type": "object"
    }
  },
  "description": "Definition of AWS::MediaLive::SignalMap Resource Type",
  "handlers": {
    "create": {
      "permissions": [
        "medialive:CreateSignalMap",
        "medialive:GetSignalMap",
        "medialive:CreateTags",
        "medialive:DescribeChannel",
        "medialive:DescribeInput",
        "medialive:DescribeInputDevice",
        "medialive:DescribeInputSecurityGroup",
        "medialive:DescribeMultiplex",
        "medialive:DescribeMultiplexProgram",
        "medialive:ListChannels",
        "medialive:ListInputDevices",
        "medialive:ListInputSecurityGroups",
        "medialive:ListInputs",
        "medialive:ListMultiplexPrograms",
        "medialive:ListMultiplexes",
        "medialive:ListOfferings",
        "medialive:ListReservations",
        "medialive:ListTagsForResource",
        "cloudfront:ListDistributions",
        "cloudfront:GetDistribution",
        "ec2:DescribeNetworkInterfaces",
        "mediaconnect:ListEntitlements",
        "mediaconnect:ListFlows",
        "mediaconnect:ListOfferings",
        "mediaconnect:ListReservations",
        "mediaconnect:DescribeFlow",
        "mediapackage:ListChannels",
        "mediapackage:ListOriginEndpoints",
        "mediapackage:DescribeChannel",
        "mediapackage:DescribeOriginEndpoint",
        "mediapackagev2:ListChannelGroups",
        "mediapackagev2:ListChannels",
        "mediapackagev2:ListOriginEndpoints",
        "mediapackagev2:GetChannelGroup",
        "mediapackagev2:GetChannel",
        "mediapackagev2:GetOriginEndpoint",
        "tag:GetResources"
      ]
    },
    "delete": {
      "permissions": [
        "medialive:GetSignalMap",
        "medialive:DeleteSignalMap"
      ]
    },
    "list": {
      "permissions": [
        "medialive:ListSignalMaps"
      ]
    },
    "read": {
      "permissions": [
        "medialive:GetSignalMap",
        "tag:GetResources"
      ]
    },
    "update": {
      "permissions": [
        "medialive:StartUpdateSignalMap",
        "medialive:GetSignalMap",
        "medialive:CreateTags",
        "medialive:DeleteTags",
        "medialive:DescribeChannel",
        "medialive:DescribeInput",
        "medialive:DescribeInputDevice",
        "medialive:DescribeInputSecurityGroup",
        "medialive:DescribeMultiplex",
        "medialive:DescribeMultiplexProgram",
        "medialive:ListChannels",
        "medialive:ListInputDevices",
        "medialive:ListInputSecurityGroups",
        "medialive:ListInputs",
        "medialive:ListMultiplexPrograms",
        "medialive:ListMultiplexes",
        "medialive:ListOfferings",
        "medialive:ListReservations",
        "medialive:ListTagsForResource",
        "cloudfront:ListDistributions",
        "cloudfront:GetDistribution",
        "ec2:DescribeNetworkInterfaces",
        "mediaconnect:ListEntitlements",
        "mediaconnect:ListFlows",
        "mediaconnect:ListOfferings",
        "mediaconnect:ListReservations",
        "mediaconnect:DescribeFlow",
        "mediapackage:ListChannels",
        "mediapackage:ListOriginEndpoints",
        "mediapackage:DescribeChannel",
        "mediapackage:DescribeOriginEndpoint",
        "mediapackagev2:ListChannelGroups",
        "mediapackagev2:ListChannels",
        "mediapackagev2:ListOriginEndpoints",
        "mediapackagev2:GetChannelGroup",
        "mediapackagev2:GetChannel",
        "mediapackagev2:GetOriginEndpoint",
        "tag:GetResources"
      ]
    }
  },
  "primaryIdentifier": [
    "/properties/Identifier"
  ],
  "properties": {
    "Arn": {
      "description": "A signal map's ARN (Amazon Resource Name)",
      "pattern": "^arn:.+:medialive:.+:signal-map:.+$",
      "type": "string"
    },
    "CloudWatchAlarmTemplateGroupIdentifiers": {
      "items": {
        "pattern": "^[^\\s]+$",
        "type": "string"
      },
      "type": "array"
    },
    "CloudWatchAlarmTemplateGroupIds": {
      "items": {
        "maxLength": 11,
        "minLength": 7,
        "pattern": "^(aws-)?[0-9]{7}$",
        "type": "string"
      },
      "type": "array"
    },
    "CreatedAt": {
      "format": "date-time",
      "type": "string"
    },
    "Description": {
      "description": "A resource's optional description.",
      "maxLength": 1024,
      "minLength": 0,
      "type": "string"
    },
    "DiscoveryEntryPointArn": {
      "description": "A top-level supported AWS resource ARN to discovery a signal map from.",
      "maxLength": 2048,
      "minLength": 1,
      "type": "string"
    },
    "ErrorMessage": {
      "description": "Error message associated with a failed creation or failed update attempt of a signal map.",
      "maxLength": 2048,
      "minLength": 0,
      "type": "string"
    },
    "EventBridgeRuleTemplateGroupIdentifiers": {
      "items": {
        "pattern": "^[^\\s]+$",
        "type": "string"
      },
      "type": "array"
    },
    "EventBridgeRuleTemplateGroupIds": {
      "items": {
        "maxLength": 11,
        "minLength": 7,
        "pattern": "^(aws-)?[0-9]{7}$",
        "type": "string"
      },
      "type": "array"
    },
    "FailedMediaResourceMap": {
      "$ref": "#/definitions/FailedMediaResourceMap"
    },
    "ForceRediscovery": {
      "default": false,
      "description": "If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.",
      "type": "boolean"
    },
    "Id": {
      "description": "A signal map's id.",
      "maxLength": 11,
      "minLength": 7,
      "pattern": "^(aws-)?[0-9]{7}$",
      "type": "string"
    },
    "Identifier": {
      "type": "string"
    },
    "LastDiscoveredAt": {
      "format": "date-time",
      "type": "string"
    },
    "LastSuccessfulMonitorDeployment": {
      "$ref": "#/definitions/SuccessfulMonitorDeployment"
    },
    "MediaResourceMap": {
      "$ref": "#/definitions/MediaResourceMap"
    },
    "ModifiedAt": {
      "format": "date-time",
      "type": "string"
    },
    "MonitorChangesPendingDeployment": {
      "default": false,
      "description": "If true, there are pending monitor changes for this signal map that can be deployed.",
      "type": "boolean"
    },
    "MonitorDeployment": {
      "$ref": "#/definitions/MonitorDeployment"
    },
    "Name": {
      "description": "A resource's name. Names must be unique within the scope of a resource type in a specific region.",
      "maxLength": 255,
      "minLength": 1,
      "pattern": "^[^\\s]+$",
      "type": "string"
    },
    "Status": {
      "$ref": "#/definitions/SignalMapStatus"
    },
    "Tags": {
      "$ref": "#/definitions/TagMap"
    }
  },
  "readOnlyProperties": [
    "/properties/Arn",
    "/properties/CloudWatchAlarmTemplateGroupIds",
    "/properties/CreatedAt",
    "/properties/ErrorMessage",
    "/properties/EventBridgeRuleTemplateGroupIds",
    "/properties/FailedMediaResourceMap",
    "/properties/Id",
    "/properties/Identifier",
    "/properties/LastDiscoveredAt",
    "/properties/LastSuccessfulMonitorDeployment",
    "/properties/MediaResourceMap",
    "/properties/ModifiedAt",
    "/properties/MonitorChangesPendingDeployment",
    "/properties/MonitorDeployment",
    "/properties/Status"
  ],
  "required": [
    "DiscoveryEntryPointArn",
    "Name"
  ],
  "tagging": {
    "cloudFormationSystemTags": false,
    "permissions": [
      "medialive:CreateTags",
      "medialive:DeleteTags"
    ],
    "tagOnCreate": true,
    "tagProperty": "/properties/Tags",
    "tagUpdatable": true,
    "taggable": true
  },
  "typeName": "AWS::MediaLive::SignalMap",
  "writeOnlyProperties": [
    "/properties/CloudWatchAlarmTemplateGroupIdentifiers",
    "/properties/EventBridgeRuleTemplateGroupIdentifiers",
    "/properties/ForceRediscovery"
  ]
}
